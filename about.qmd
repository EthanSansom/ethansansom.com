---
# title: About
page-layout: custom
---

<div class = "big-title">About</div>

Hi, I'm Ethan, originally from Saskatoon, <span class = "button-text" id = "Sask">Saskatchewan</span>, now living in Toronto, Ontario. I moved here in 2017 to complete a Bachelors degree in Statistics and Economics at the University of Toronto. After finishing my undergraduate degree I worked as the University of Toronto economics department's longest serving research assistant, first working with Laura Derksen to measure the role of information access in social network formation in this [paper](https://drlauraderksen.github.io/mywebsite/DerksenSouza20240724.pdf) and then working with Eva Vivalt for nearly two years on an RCT studying the impacts of [unconditional cash transfers](https://evavivalt.com/wp-content/uploads/Vivalt-et-al.-ORUS-employment.pdf). I continue to work on the unconditional cash transfers project as a part-time Data Analyst for the Open Research Lab and have returned to the University of Toronto for a Masters in Statistics.

At work and in school I use the R programming language nearly every day for statistical analysis and <span class = "button-text">data</span> wrangling. I occasionally write R [packages](https://github.com/EthanSansom/vlightr) and frequently [plan to write](https://github.com/EthanSansom/typewriter) R packages. For tasks at which R does not excel, I am also comfortable using Javascript and Python. I am slowly working my way through [learncpp.com](https://www.learncpp.com/) - I'll let you know here when I've finished.

When I have time, I like to meet and volunteer with cool data-people. From 2020-2022 I volunteered on the executive team of the Toronto Chapter of [Data for Good](https://dataforgood.ca/about-us/), where I helped organize events for students and data-oriented-professionals to meet and conduct pro-bono <span class = "button-text">data</span> analyses on the behalf of local charities. In 2023, I gave this [presentation](https://www.youtube.com/watch?v=5uoTKp7M3r8) at a Civic Tech Toronto event about <span class = "button-text" id = "tree">trees</span>, based on a [paper](https://github.com/EthanSansom/torontotreeinequities) that I wrote for an undergraduate course, also about trees (Civic Tech hosts hybrid in-person and digital presentations weekly, I'd recommend watching this [one](https://www.youtube.com/watch?v=1_kSEhsn1ik) given by best cartographer [Jeff Allen](https://jamaps.github.io/maps.html)).

When I have more time still, I enjoy reading old <span class = "button-text">sci-fi</span> novels - unfortunately I don't always know when to quit (I made it through the first 3 of 10 books in L. Ron Hubbardâ€™s 1.2 million word Mission Earth series, which I canâ€™t recommend). I also enjoy, but am less proficient at, trying to restore old <span class = "button-text">chairs</span> and other furniture. If you happened to shop on Queen Street West during the summer of 2018, you may own a wobbly live-edge wood table that I built. My preferred video game is Wii <span class = "button-text">Sports</span>.

:::: {#matter-container}
::::

```{ojs}
//| echo: false
//| output: false

// Imports ---------------------------------------------------------------------

d3 = require("d3");
Matter = require("matter-js");

Engine = Matter.Engine
Bodies = Matter.Bodies
Composite = Matter.Composite

// Helpers ---------------------------------------------------------------------

// Transform Matter body vertices into SVG <polygon> points
vertices_to_points = function(vertices) {
  return vertices.map(vertex => `${vertex.x},${vertex.y}`).join(" ")
}

// Initialize SVG --------------------------------------------------------------

// Dimensions. These really just set how large the physics bodies (emojis) are
// doing to appear. The height should be very small, but you can expand the
// width to make the emojis appear larger or smaller.
height = 5;
width = 1000;

// We want this to take up the entire content section of the document

svg = d3.select("footer.footer")
  .append("svg")
  .attr("viewBox", [0, 0, width, height])
  .attr("style", "max-width: 100%; height: auto;")
  // Allows the physics objects to fall outside of the view-box
  .attr("overflow", "visible");

// Initialize Physics Objects --------------------------------------------------

// Create an engine
engine = Engine.create();

// Global variable which records all physics objects in the scene
bodies = engine.world.bodies;

// The ground
ground = Bodies.rectangle(
  width / 2, height, width, height,
  { 
    isStatic: true, 
    label: "ground"
  }
);
Composite.add(engine.world, ground);

// Test emoji

// Vertices for the pine-tree emoji
tree_vertices = [
  {x: 103, y: 32},
  {x: 122, y: 65},
  {x: 131, y: 83},
  {x: 141, y: 105},
  {x: 145, y: 118},
  {x: 132, y: 134},
  {x: 118, y: 133},
  {x: 109, y: 133},
  {x: 109, y: 139},
  {x: 94, y: 138},
  {x: 94, y: 128},
  {x: 78, y: 127},
  {x: 55, y: 124},
  {x: 67, y: 96},
  {x: 79, y: 73},
  {x: 83, y: 64}
];

// TODO: Think more about how we want to deal with heights. I guess we could
// query for the screen height and go relative to that?

create_tree = function(x, y) {
  const emoji = "ðŸŒ²";
  const body = Bodies.fromVertices(x, y, tree_vertices);
  Composite.add(engine.world, body);
  
  /*
  svg
    .append("polygon")
    .attr("id", `body-bounding-box-${body.id}`)
    .attr("points", vertices_to_points(body.vertices))
    .attr("fill", "red")
    .attr("opacity", 0)
    .lower()
  */
  
  svg
    .append("text")
    .attr("id", `body-${body.id}`)
    .attr("x", body.position.x)
    .attr("y", body.position.y)
    .attr("text-anchor", "middle")
    .attr("dominant-baseline", "middle")
    .attr("font-size", 107)
    .style("user-select", "none")
    .style("pointer-events", "none")
    .text(emoji)
}


// Using this for testing, colors the SVG bounds so we can do collision tuning
create_circle_emoji = function(x, y, emoji) {
  // Add the physics body
  const circle = Bodies.polygon(x, y, 50, 50);
  Composite.add(engine.world, circle);
  
  // Add the emoji text, must be a circular emoji
  svg
    .append("text")
    .attr("id", `body-${circle.id}`)
    .attr("x", circle.position.x)
    .attr("y", circle.position.y)
    .attr("text-anchor", "middle")
    .attr("dominant-baseline", "middle")
    .attr("dy", 13)
    .attr("font-size", 107)
    .style("user-select", "none")
    .style("pointer-events", "none")
    .text(emoji)
    .raise()
}

d3
  .select("#tree")
  .on("click", function() {
    const x = Math.random() * width;
    const y = -1000;
    create_tree(x, y);
  });
  
d3
  .select("#Sask")
  .on("click", function() {
    const x = Math.random() * width;
    const y = -1000;
    const emoji = ["ðŸ˜­", "ðŸ˜Š", "ðŸ˜‚"][Math.floor(Math.random() * 3)]
    create_circle_emoji(x, y, emoji);
  });
```


```{ojs}
//| echo: false
//| output: false

function* update() {
  
  while (true) {
    // Update the engine
    Engine.update(engine, 5)
    
    // Update the positions of the bodies, using the text
    bodies.filter(body => body.label != "ground").forEach(body => {
      const body_angle = body.angle * (180 / Math.PI);
      const body_x = body.position.x;
      const body_y = body.position.y;
      svg.select(`#body-${body.id}`)
        .attr("x", body_x)
        .attr("y", body_y)
        .attr("transform", `rotate(${body_angle}, ${body_x}, ${body_y})`);
        
      // Draw the background as well (TODO: Remove, this is just for testing)
      // svg.select(`#body-bounding-box-${body.id}`).attr("points", vertices_to_points(body.vertices))
    })
    
    // Finish
    yield
  }
}

// Call the `update()` function once to begin the loop
update();
```
