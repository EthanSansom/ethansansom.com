---
title: "Intro to Probability Distributions"
date: "2025-01-30"
categories: ["draft"]
css: "styles.css" # Ahhh! It reads the CSS relative to the local directory
# image: "vlightr_hex.svg"
# smallimage: '<img src="posts/2025_01_30_vlightr/vlightr_small.svg">'
description: |
  I don't have a description yet.
summary: |
  I don't have a description yet.
editor: 
  markdown: 
    wrap: 72
knitr:
  opts_chunk:
    dev: svg
    dev.args: { bg: "transparent" }
    echo: false
    warning: false
---

<br>

```{r}
#| label: r-setup
#| include: false

library(ggplot2)
library(scales)
library(showtext)

library(tibble)
library(dplyr)
library(rlang)
library(purrr)
library(stringr)
library(tidyr)

set.seed(123)

# font_add_google(name = "Inter")
# font_add_google(name = "Oswald") # TODO: Remove, just for testing
# showtext_auto()

# Plotting constants for distribution plots
GREEN <- "#59B85E"
PLOT_OPTS <- list(
  adjust = 3,
  fill = GREEN,
  color = GREEN,
  alpha = 1,
  linewidth = 2,
  lineend = "round"
)
```

```{r}
#| label: simulate-distributions
#| include: false

MEAN_HEIGHT <- 25
SMALL_MEAN <- MEAN_HEIGHT / 2
BIG_MEAN <- MEAN_HEIGHT * 2
N_SAMPLE <- 100

heights <- round(sort(c(seq(0, 70, length.out = 199), MEAN_HEIGHT)), 4)
if (any(duplicated(heights))) stop("Generated duplicate tree `heights`.")

# Density Anchor Points --------------------------------------------------------
#
# For drawing nice density curves we want to calculate the PDF (e.g. f(height)) 
# for each of the evenly spaced tree `heights`.

left_gamma_density <- dgamma(heights, shape = sqrt(MEAN_HEIGHT), scale = sqrt(MEAN_HEIGHT))
right_gamma_density <- dgamma(max(heights) - heights, shape = sqrt(MEAN_HEIGHT), scale = sqrt(MEAN_HEIGHT))
normal_density <-  dnorm(heights, mean = MEAN_HEIGHT, sd = MEAN_HEIGHT / 6)
uniform_density <- dunif(heights, 0, 70)
bimodal_density <- c(
  dnorm(heights[seq(1, length(heights) %/% 2)], mean = SMALL_MEAN, sd = MEAN_HEIGHT / 8),
  dnorm(heights[seq(1 + length(heights) %/% 2, length(heights))], mean = BIG_MEAN, sd = MEAN_HEIGHT / 8)
)
# HACK: This should be `heights == 25`, but I'm picking up nearby points as well.
# Otherwise, the bezier curve generated by `d3.line().curve(d3.curveBasis)` will
# be much too short (~0.65) instead of hitting 1.0.
point_density <- if_else(abs(heights - 25) < 0.4, 1, 0)

# plot(heights, left_gamma_density)
# plot(heights, right_gamma_density)
# plot(heights, bimodal_density)
# plot(heights, normal_density)
# plot(heights, uniform_density)
# plot(heights, point_density)

# Distribution Samples ---------------------------------------------------------
#
# To draw the forest we want a *random* draw of 100 tree heights from each distribution.

left_gamma_sample <- rgamma(n = N_SAMPLE, shape = sqrt(MEAN_HEIGHT), scale = sqrt(MEAN_HEIGHT))
right_gamma_sample <- max(left_gamma_sample) - left_gamma_sample
normal_sample <-  rnorm(n = N_SAMPLE, mean = MEAN_HEIGHT, sd = MEAN_HEIGHT / 6)
uniform_sample <- runif(n = N_SAMPLE, 0, 70)
bimodal_sample <- c(
  rnorm(n = N_SAMPLE / 2, mean = SMALL_MEAN, sd = MEAN_HEIGHT / 8),
  rnorm(n = N_SAMPLE / 2, mean = BIG_MEAN, sd = MEAN_HEIGHT / 8)
)
point_sample <- rep(MEAN_HEIGHT, times = N_SAMPLE)

# Shuffle around the samples so we're not plotting tall-near-tall, short-near-short
left_gamma_sample <- sample(left_gamma_sample, N_SAMPLE)
right_gamma_sample <- sample(right_gamma_sample, N_SAMPLE)
normal_sample <- sample(normal_sample, N_SAMPLE)
uniform_sample <- sample(uniform_sample, N_SAMPLE)
bimodal_sample <- sample(bimodal_sample, N_SAMPLE)

# ggplot() + geom_histogram(aes(x = left_gamma_sample))
# ggplot() + geom_histogram(aes(x = right_gamma_sample))
# ggplot() + geom_histogram(aes(x = normal_sample))
# ggplot() + geom_histogram(aes(x = uniform_sample))
# ggplot() + geom_histogram(aes(x = bimodal_sample))
# ggplot() + geom_histogram(aes(x = point_sample))

# Pass along density, sample, and heights to OJS -------------------------------

ojs_define(heights)

ojs_define(uniform_density)
ojs_define(normal_density)
ojs_define(left_gamma_density)
ojs_define(right_gamma_density)
ojs_define(point_density)
ojs_define(bimodal_density)

ojs_define(uniform_sample)
ojs_define(normal_sample)
ojs_define(left_gamma_sample)
ojs_define(right_gamma_sample)
ojs_define(point_sample)
ojs_define(bimodal_sample)
```

```{r}
#| label: load-forest
#| include: false

# TODO: Add random animals to the forest!! Easy change to make in the D3

# Process a .txt "drawing" of the forest where a "T" represents a tree and " "
# is a gap between trees. Returns a data.frame of x, y coordinates for each tree.
object_positions <- readLines("resources/tree_positions.txt")
object_positions <- object_positions |>
  str_pad(width = max(nchar(object_positions)), side = "right") |>
  map(\(line) str_split_1(line, ""))

forest_positions <- object_positions |>
  map(\(line) which(line != " ")) |>
  enframe(value = "x", name = "y") |>
  unnest_longer(col = "x") |>
  mutate(
    # Add the emoji
    key = map2_chr(x, y, \(x, y) object_positions[[y]][[x]]),
    emoji = case_match(
      key,
      "T" ~ "üå≤",
      "R" ~ "ü™®",
      "D" ~ "ü¶å",
      "L" ~ "ü™µ",
      "H" ~ "ü¶î"
    ),
    type = if_else(key == "T", "tree", "other"),
    
    # Add a scale factor to non-trees
    font_scale = case_match(
      key,
      "T" ~ 1,
      "D" ~ 0.8,
      "H" ~ 0.5,
      .default = sample(seq(0.4, 0.9, 0.1), n(), TRUE)
    ),
    
    # Apply small horizontal perturbations
    x = pmax(0, x + rnorm(n = n(), sd = 0.1)),
    
    # Scale to be in range [0, 1]
    x = x / max(x),
    y = y / max(y)
  )

if (nrow(forest_positions %>% filter(emoji == "üå≤")) != 100) {
  cli::cli_abort("`tree_positions` must have 100 tree rows.")
}

ojs_define(forest_positions_raw = forest_positions)
```

:::::{.column-screen-inset style="padding: 20px;"}
:::::{.columns}

<!-- Header Columns for Buttons ---->

:::::{.column style="padding: 10px; width: 50%;"}

:::{#density-button-container}
:::

:::::

:::::{.column style="padding: 10px; width: 50%;"}
:::::


<!-- Plot Columns for Distribution and Forest ---->
<!--
For now, since the forest text is longer, I'm leaving the title and sub-title
in WITH the plot, but if we want to align the tops of each plot we'll have to
push the titles into a new set of two columns.
--->

:::::{.column style="padding: 10px; width: 50%;"}

<!---
TODO: Prepare the contents of each sub-title and title (pass via R as a named
list). The density subtitle should describe the locations of "humps" and "spikes"
as well as the general "vibe" of the density. The forest should give some details
about the number of "large" or "small" trees. You can do this in R by using the
*actual* values of the samples to prepare the text + known means of each distribution.
---->

```{=html}
<p id = "density-title" style = "font-weight: 600;">
The Normally Density Curve
</p>
<p id = "density-subtitle" style = "opacity: 0.6;">
This density indicates that 65% of trees are between 5 and 10 meters tall.
</p>
```

:::{#density-container}
:::

:::::

:::::{.column style="padding: 10px; width: 50%;"}

```{=html}
<p id = "forest-title" style = "font-weight: 600;">
The Forest with Normally Distributed Tree Heights
</p>
<p id = "forest-subtitle" style = "opacity: 0.6;">
This forest contains 15 large trees (those taller than 40 meters). If tree height follows a normal distribution, the probability of a tree being taller than 40 meters is around 15.56%.
</p>
```

:::{#forest-canvas-container}
:::

:::::

:::::
:::::

<!-- CSS for Custom Buttons (TODO: Move elsewhere, maybe website-wide) --->

```{=html}
<!--
TODO: You copied this button CSS from here, eventually you should refine it and
move this to a custom CSS file. Maybe define a few "site-wide" components that
you like (e.g. info on-hover pop-up, filter-button, slider, text-input, etc.)
https://getcssscan.com/css-buttons-examples
--->

<style>
.button-filter {
  align-items: center;
  appearance: none;
  background-color: #fff;
  border: 1px solid #dbdbdb;
  border-radius: .375em;
  box-shadow: none;
  box-sizing: border-box;
  color: #363636;
  cursor: pointer;
  display: inline-flex;
  justify-content: center;
  padding: calc(.5em - 1px) 1em;
  position: relative;
  text-align: center;
  user-select: none;
  -webkit-user-select: none;
  touch-action: manipulation;
  vertical-align: top;
  white-space: nowrap;
}

.button-filter:active {
  border-color: #59B85E;
  outline: 0;
}

.button-filter.active {
  border-color: #59B85E;
  outline: 0;
}

.button-filter:focus {
  border-color: #59B85E;
  outline: 0;
}

.button-filter:hover {
  border-color: #59B85E;
}

.button-filter:focus:not(:active) {
  box-shadow: rgba(72, 95, 199, .25) 0 0 0 .125em;
}
</style>
```

<!-- D3 to Define the Density Plot --->

```{ojs}
//| echo: false
//| output: false

// NOTE: This plot is based on Yan Holtz's density plot:
// https://d3-graph-gallery.com/graph/density_basic.html

// TODO: Implement CDF plots which show some amount of density between points x_1, x_2.
// Here's an interactive example based on mouse position:
// https://gist.github.com/ctufts/a90019910166d8378c6462dfd2f6f3ec

// TODO: Develop your own tooltips for things like an info button (‚ÑπÔ∏è) that
// match Quarto. They use the tippy JS library: https://atomiks.github.io/tippyjs/v6/getting-started/
// Import this like you did GLightbox in the gallery page, then use it to make
// custom tooltips.

// TODO: Experiment with arquero, https://idl.uw.edu/arquero/api/
// See Quarto mention: https://quarto.org/docs/interactive/ojs/libraries.html#arquero
// Arquero and D3: https://observablehq.com/@uwdata/arquero-and-d3

d3 = require("d3@7");
// import { aq, op } from '@uwdata/arquero';

/* Constants -----------------------------------------------------------------*/

// Observable is picky about object creation, see:
// https://observablehq.com/documentation/cells/observable-javascript#statements-need-curly-braces-and-return-or-yield
margin = { return {left: 40, right: 30, top: 30, bottom: 30}; }

plot_width = 500;
plot_height = 400;
width = plot_width - margin.left - margin.right;
height = plot_height - margin.top - margin.bottom;

green = "#59B85E";

/* SVG Initialization --------------------------------------------------------*/

svg = d3.select("#density-container")
  .append("svg")
  .attr("viewBox", [0, 0, plot_width, plot_height])
  .attr("style", "max-width: 100%; height: auto;")
  // .style("background", "red")
  // This defines the centered "panel"
  .append("g")
  .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

/* Axes ----------------------------------------------------------------------*/

// We'll initially plot the normal density
initial_density = normal_density;

x = d3.scaleLinear()
  .range([0, width])
  .domain([0, Math.max(...heights)]);

x_axis = svg.append("g")
  .attr("transform", "translate(0," + height + ")")
  .call(d3.axisBottom(x));

y = d3.scaleLinear()
  .range([height, 0])
  .domain([0, Math.round(Math.max(...initial_density) * 1.25 * 100) / 100]);

y_axis = svg.append("g").call(d3.axisLeft(y));

/* Curve ---------------------------------------------------------------------*/

// Creates an array of [x, y] pairs. Add [0, 0] and [70, 0] points to all densities.
density = d3.zip(
  [0, ...heights, 70], 
  [0, ...initial_density, 0]
);

curve = svg
  .append('g')
  .append("path")
  // Note that we use `.datum()` since the path requires *all* of the data-points
  .datum(density)
  .attr("fill", green)
  .attr("fill-opacity", 0.5)
  .attr("stroke", green)
  .attr("stroke-width", 2)
  .attr("stroke-linejoin", "round")
  .attr("d",  d3.line()
    .curve(d3.curveBasis)
      .x(function(d) { return x(d[0]); })
      .y(function(d) { return y(d[1]); })
  );
```

<!-- D3 to Initialize the Forest --->

```{ojs}
//| echo: false
//| output: false

// NOTE: Following this <canvas> x D3 tutorial by Lars Verspohl
// https://www.datamake.io/blog/d3-canvas-full#manual

// Initializes the <canvas> element (like starting an <svg>)
canvas = d3.select("#forest-canvas-container").append("canvas");

// The context carries all of the information *about* the <canvas>, i.e. what
// to draw and where
context = canvas.node().getContext("2d");
context.textAlign = "center"; 
context.textBaseline = "middle";

// NOTE: I'm not 100% on the intricacies of <canvas>, but to prevent blurry
// drawings you need to adjust the canvas's width and height attribute by a
// pixel-density scale. Most Stack answers I saw only used a fixed-width canvas,
// but my test is working with "width: 100%; height: auto;". 
//
// This ends up working like <svg> viewbox. The `canvas_width` and `canvas_height` 
// are the coordinates for our elements. E.g. The code below:
// `context.fillText("X", canvas_width / 2, canvas_height / 2);`
// draws an "X" to the center of the canvas.
//
// However if you inspect the canvas, it's *actual* width and height attributes
// are: `canvas_width * scale`, `canvas_height * scale`.
canvas_width = 1000;
canvas_height = 700;
canvas_width_padding = 100;
canvas_height_padding = 100;
canvas_font_size = 80;
scale = window.devicePixelRatio || 1;
canvas
  // Adjust (e.g. upscale) the canvas dimensions by the `scale`
  .attr("width", canvas_width * scale)
  .attr("height", canvas_height * scale)
  // .style("width", `${canvas_width}px`)
  // .style("height", `${canvas_height}px`);
  .style("width", "100%")
  .style("height", "auto")

// Tell the context about our `scale`. This seems to adjust data (e.g. coordinates)
// given to the context by the appropriate scale.
context.scale(scale, scale);

// Scale the tree and decor positions such that they conform to the <canvas> size
forest_positions = 
  transpose(forest_positions_raw)
  .map(d => ({
      x: d.x * (canvas_width - canvas_width_padding) + (canvas_width_padding / 2),
      y: d.y * (canvas_height - canvas_height_padding) + (canvas_width_padding / 2),
      emoji: d.emoji,
      type: d.type,
      font_scale: d.font_scale
  }));

// This is the interface through which we use D3. We create an element, which we
// can data-bind to in the usual way, but we *don't* add it to the DOM. We use
// this container to *store* the data and use D3 to manipulate entering, exiting,
// and updating data as usual. We pass this information onto <canvas> for drawing.
content_container = document.createElement("content");

// Append the trees to the container as you normally would, instead of `.style()`
// always use attribute, since we're just interested in telling <canvas> what to
// do.
content = d3.select(content_container)
  .selectAll()
  .data(forest_positions)
  .join("text")
  .attr("font-size", d => canvas_font_size * d.font_scale)
  .attr("x", d => d.x)
  .attr("y", d => d.y)
  .text(d => d.emoji)
  .classed("tree", d => (d.type === "tree"));

// console.log(content.nodes());
console.log(trees.nodes());

// Draw the trees to the canvas
draw = function() {
  // Clear the canvas
  context.clearRect(0, 0, canvas_width, canvas_height);
  
  // Render every element to the <canvas>
  content.each(function(d, i) {
    const node = d3.select(this);
    context.font = `${node.attr("font-size")}px monospace`;
    context.fillText(node.text(), node.attr("x"), node.attr("y"));
  });
}
```

<!-- D3 to Update the Density Curve and Forest --->

```{ojs}
//| echo: false
//| output: false

densities = {
  return {
    Normal: normal_density,
    Uniform: uniform_density,
    Point: point_density,
    Gamma: left_gamma_density,
    "Reverse Gamma": right_gamma_density,
    Bimodal: bimodal_density
  }
};

// https://stats.stackexchange.com/questions/281162/scale-a-number-between-a-range
rescale = function(x, x_min, x_max, target_min, target_max) {
  return ((x - x_min) / (x_max - x_min)) * (target_max - target_min) + target_min;
};

rescale_array = function(array, target_min, target_max) {
  const array_min = Math.min(...array);
  const array_max = Math.max(...array);
  return array.map(x => rescale(x, array_min, array_max, target_min, target_max));
};

// Scale the samples from each distribution such that they're relative to the
// canvas font size (since this is what controls the tree "height").
min_sample_value = canvas_font_size * 0.5;
max_sample_value = canvas_font_size * 1.75;

// The normal and the point sample should have the same mean, so I'm just going
// to set the point sample tree height to that of the mean normal height, since
// we can't re-scale the point mass (it has min == max).
scaled_normal_mean = (rescale_array(normal_sample, min_sample_value, max_sample_value).reduce((a, b) => a + b)) / normal_sample.length;
scaled_point_sample = point_sample.map(x => scaled_normal_mean);

// We need to re-scale each sample to accommodate a reasonable font size
samples = {
  return {
    Normal: rescale_array(normal_sample, min_sample_value, max_sample_value),
    Uniform: rescale_array(uniform_sample, min_sample_value, max_sample_value),
    Point: scaled_point_sample,
    Gamma: rescale_array(left_gamma_sample, min_sample_value, max_sample_value),
    "Reverse Gamma": rescale_array(right_gamma_sample, min_sample_value, max_sample_value),
    Bimodal: rescale_array(bimodal_sample, min_sample_value, max_sample_value)
  }
};

// Create buttons for switching between `densities`
buttons = d3.select("#density-button-container")
  .style("display", "flex")
  .style("gap", "10px")
  .selectAll('density-button')
  .data(Object.keys(densities))
  .enter()
  .append('div')
  .attr("class", "button-filter")
  .call(div => div.append("p")
    .style("margin", "0px")
    .text(function(d) { return d })
  )
  // Passes the density key of the inner text element to the density function
  .on("click", function() { 
    // Toggle the button's active state
    d3.selectAll(".button-filter").classed("active", false);
    d3.select(this).classed("active", true); 
    
    // Update the plots
    update(d3.select(this).select("p").text());
  });

// Update the distribution shown in the D3 plot and "forest". 
update = function(selected_distribution) {
  const duration_ms = 1000;
  const current_density = densities[selected_distribution];
  const current_sample = samples[selected_distribution];
  
  // DENSITY PLOT
  const density = d3.zip(
    [0, ...heights, 70], 
    [0, ...current_density, 0]
  );
  
  // Update the y-axis
  const y = d3.scaleLinear()
    .range([height, 0])
    .domain([0, Math.round(Math.max(...current_density) * 1.25 * 100) / 100]);

  // Transition the existing y-axis into the new one
  y_axis
    .transition()
    .duration(duration_ms)
    .call(d3.axisLeft(y));
  
  // Update the "d" (path) attribute of the density curve
  curve
    .datum(density)
    .transition()
    .duration(duration_ms)
    .attr("d",  d3.line()
        .curve(d3.curveBasis)
        .x(function(d) { return x(d[0]); })
        .y(function(d) { return y(d[1]); })
    );
    
  // FOREST
  
  // Update the tree font-size in `content` and re-draw the forest
  const trees = d3.select(content_container).selectAll("text.tree");
  trees
    .transition()
    .duration(duration_ms)
    .attr("font-size", (d, i) => (current_sample[i]));
  
  // Update loop for the <canvas> drawing, synced with the `content.transition()`
  // above. `d3.timer()` is just like `requestAnimationFrame`, it's going to run
  // at 60 fps by default. Recall that `draw()` is getting data from the global
  // `content` object, so it's synced automatically.
  var t = d3.timer(function(elapsed) { 
    draw();
    if (elapsed > duration_ms) { 
      t.stop();
    }
  });
};

// Initialize the forest to match the normal density
update("Normal");
```
